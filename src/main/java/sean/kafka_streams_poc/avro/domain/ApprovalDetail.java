/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sean.kafka_streams_poc.avro.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ApprovalDetail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2276655629848738796L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApprovalDetail\",\"namespace\":\"sean.kafka_streams_poc.avro.domain\",\"fields\":[{\"name\":\"allocId\",\"type\":\"string\"},{\"name\":\"entity\",\"type\":{\"type\":\"enum\",\"name\":\"Entity\",\"symbols\":[\"Bloomberg\",\"TradeWeb\",\"Traiana\"]}},{\"name\":\"taserApprovalId\",\"type\":\"string\"},{\"name\":\"economics\",\"type\":\"string\"},{\"name\":\"marked\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ApprovalDetail> ENCODER =
      new BinaryMessageEncoder<ApprovalDetail>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ApprovalDetail> DECODER =
      new BinaryMessageDecoder<ApprovalDetail>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ApprovalDetail> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ApprovalDetail> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ApprovalDetail> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ApprovalDetail>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ApprovalDetail to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ApprovalDetail from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ApprovalDetail instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ApprovalDetail fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence allocId;
   private sean.kafka_streams_poc.avro.domain.Entity entity;
   private java.lang.CharSequence taserApprovalId;
   private java.lang.CharSequence economics;
   private boolean marked;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApprovalDetail() {}

  /**
   * All-args constructor.
   * @param allocId The new value for allocId
   * @param entity The new value for entity
   * @param taserApprovalId The new value for taserApprovalId
   * @param economics The new value for economics
   * @param marked The new value for marked
   */
  public ApprovalDetail(java.lang.CharSequence allocId, sean.kafka_streams_poc.avro.domain.Entity entity, java.lang.CharSequence taserApprovalId, java.lang.CharSequence economics, java.lang.Boolean marked) {
    this.allocId = allocId;
    this.entity = entity;
    this.taserApprovalId = taserApprovalId;
    this.economics = economics;
    this.marked = marked;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return allocId;
    case 1: return entity;
    case 2: return taserApprovalId;
    case 3: return economics;
    case 4: return marked;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: allocId = (java.lang.CharSequence)value$; break;
    case 1: entity = (sean.kafka_streams_poc.avro.domain.Entity)value$; break;
    case 2: taserApprovalId = (java.lang.CharSequence)value$; break;
    case 3: economics = (java.lang.CharSequence)value$; break;
    case 4: marked = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'allocId' field.
   * @return The value of the 'allocId' field.
   */
  public java.lang.CharSequence getAllocId() {
    return allocId;
  }


  /**
   * Sets the value of the 'allocId' field.
   * @param value the value to set.
   */
  public void setAllocId(java.lang.CharSequence value) {
    this.allocId = value;
  }

  /**
   * Gets the value of the 'entity' field.
   * @return The value of the 'entity' field.
   */
  public sean.kafka_streams_poc.avro.domain.Entity getEntity() {
    return entity;
  }


  /**
   * Sets the value of the 'entity' field.
   * @param value the value to set.
   */
  public void setEntity(sean.kafka_streams_poc.avro.domain.Entity value) {
    this.entity = value;
  }

  /**
   * Gets the value of the 'taserApprovalId' field.
   * @return The value of the 'taserApprovalId' field.
   */
  public java.lang.CharSequence getTaserApprovalId() {
    return taserApprovalId;
  }


  /**
   * Sets the value of the 'taserApprovalId' field.
   * @param value the value to set.
   */
  public void setTaserApprovalId(java.lang.CharSequence value) {
    this.taserApprovalId = value;
  }

  /**
   * Gets the value of the 'economics' field.
   * @return The value of the 'economics' field.
   */
  public java.lang.CharSequence getEconomics() {
    return economics;
  }


  /**
   * Sets the value of the 'economics' field.
   * @param value the value to set.
   */
  public void setEconomics(java.lang.CharSequence value) {
    this.economics = value;
  }

  /**
   * Gets the value of the 'marked' field.
   * @return The value of the 'marked' field.
   */
  public boolean getMarked() {
    return marked;
  }


  /**
   * Sets the value of the 'marked' field.
   * @param value the value to set.
   */
  public void setMarked(boolean value) {
    this.marked = value;
  }

  /**
   * Creates a new ApprovalDetail RecordBuilder.
   * @return A new ApprovalDetail RecordBuilder
   */
  public static sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder newBuilder() {
    return new sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder();
  }

  /**
   * Creates a new ApprovalDetail RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApprovalDetail RecordBuilder
   */
  public static sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder newBuilder(sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder other) {
    if (other == null) {
      return new sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder();
    } else {
      return new sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder(other);
    }
  }

  /**
   * Creates a new ApprovalDetail RecordBuilder by copying an existing ApprovalDetail instance.
   * @param other The existing instance to copy.
   * @return A new ApprovalDetail RecordBuilder
   */
  public static sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder newBuilder(sean.kafka_streams_poc.avro.domain.ApprovalDetail other) {
    if (other == null) {
      return new sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder();
    } else {
      return new sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder(other);
    }
  }

  public static ApprovalDetail fromApprovalDetail(sean.kafka_streams_poc.domain.ApprovalDetail approvalDetail) {
    ApprovalDetail ret = new ApprovalDetail();
    ret.setAllocId(approvalDetail.allocId);
    ret.setEntity(Entity.fromEntity(approvalDetail.entity));
    ret.setTaserApprovalId(approvalDetail.taserApprovalId);
    ret.setEconomics(approvalDetail.economics);
    ret.marked = approvalDetail.marked;

    return ret;
  }

  /**
   * RecordBuilder for ApprovalDetail instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApprovalDetail>
    implements org.apache.avro.data.RecordBuilder<ApprovalDetail> {

    private java.lang.CharSequence allocId;
    private sean.kafka_streams_poc.avro.domain.Entity entity;
    private java.lang.CharSequence taserApprovalId;
    private java.lang.CharSequence economics;
    private boolean marked;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.allocId)) {
        this.allocId = data().deepCopy(fields()[0].schema(), other.allocId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.taserApprovalId)) {
        this.taserApprovalId = data().deepCopy(fields()[2].schema(), other.taserApprovalId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.economics)) {
        this.economics = data().deepCopy(fields()[3].schema(), other.economics);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.marked)) {
        this.marked = data().deepCopy(fields()[4].schema(), other.marked);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ApprovalDetail instance
     * @param other The existing instance to copy.
     */
    private Builder(sean.kafka_streams_poc.avro.domain.ApprovalDetail other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.allocId)) {
        this.allocId = data().deepCopy(fields()[0].schema(), other.allocId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.taserApprovalId)) {
        this.taserApprovalId = data().deepCopy(fields()[2].schema(), other.taserApprovalId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.economics)) {
        this.economics = data().deepCopy(fields()[3].schema(), other.economics);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marked)) {
        this.marked = data().deepCopy(fields()[4].schema(), other.marked);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'allocId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAllocId() {
      return allocId;
    }


    /**
      * Sets the value of the 'allocId' field.
      * @param value The value of 'allocId'.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder setAllocId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.allocId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'allocId' field has been set.
      * @return True if the 'allocId' field has been set, false otherwise.
      */
    public boolean hasAllocId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'allocId' field.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder clearAllocId() {
      allocId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entity' field.
      * @return The value.
      */
    public sean.kafka_streams_poc.avro.domain.Entity getEntity() {
      return entity;
    }


    /**
      * Sets the value of the 'entity' field.
      * @param value The value of 'entity'.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder setEntity(sean.kafka_streams_poc.avro.domain.Entity value) {
      validate(fields()[1], value);
      this.entity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entity' field has been set.
      * @return True if the 'entity' field has been set, false otherwise.
      */
    public boolean hasEntity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'entity' field.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder clearEntity() {
      entity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'taserApprovalId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaserApprovalId() {
      return taserApprovalId;
    }


    /**
      * Sets the value of the 'taserApprovalId' field.
      * @param value The value of 'taserApprovalId'.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder setTaserApprovalId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.taserApprovalId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'taserApprovalId' field has been set.
      * @return True if the 'taserApprovalId' field has been set, false otherwise.
      */
    public boolean hasTaserApprovalId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'taserApprovalId' field.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder clearTaserApprovalId() {
      taserApprovalId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'economics' field.
      * @return The value.
      */
    public java.lang.CharSequence getEconomics() {
      return economics;
    }


    /**
      * Sets the value of the 'economics' field.
      * @param value The value of 'economics'.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder setEconomics(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.economics = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'economics' field has been set.
      * @return True if the 'economics' field has been set, false otherwise.
      */
    public boolean hasEconomics() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'economics' field.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder clearEconomics() {
      economics = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'marked' field.
      * @return The value.
      */
    public boolean getMarked() {
      return marked;
    }


    /**
      * Sets the value of the 'marked' field.
      * @param value The value of 'marked'.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder setMarked(boolean value) {
      validate(fields()[4], value);
      this.marked = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'marked' field has been set.
      * @return True if the 'marked' field has been set, false otherwise.
      */
    public boolean hasMarked() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'marked' field.
      * @return This builder.
      */
    public sean.kafka_streams_poc.avro.domain.ApprovalDetail.Builder clearMarked() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ApprovalDetail build() {
      try {
        ApprovalDetail record = new ApprovalDetail();
        record.allocId = fieldSetFlags()[0] ? this.allocId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.entity = fieldSetFlags()[1] ? this.entity : (sean.kafka_streams_poc.avro.domain.Entity) defaultValue(fields()[1]);
        record.taserApprovalId = fieldSetFlags()[2] ? this.taserApprovalId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.economics = fieldSetFlags()[3] ? this.economics : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.marked = fieldSetFlags()[4] ? this.marked : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ApprovalDetail>
    WRITER$ = (org.apache.avro.io.DatumWriter<ApprovalDetail>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ApprovalDetail>
    READER$ = (org.apache.avro.io.DatumReader<ApprovalDetail>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.allocId);

    out.writeEnum(this.entity.ordinal());

    out.writeString(this.taserApprovalId);

    out.writeString(this.economics);

    out.writeBoolean(this.marked);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.allocId = in.readString(this.allocId instanceof Utf8 ? (Utf8)this.allocId : null);

      this.entity = sean.kafka_streams_poc.avro.domain.Entity.values()[in.readEnum()];

      this.taserApprovalId = in.readString(this.taserApprovalId instanceof Utf8 ? (Utf8)this.taserApprovalId : null);

      this.economics = in.readString(this.economics instanceof Utf8 ? (Utf8)this.economics : null);

      this.marked = in.readBoolean();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.allocId = in.readString(this.allocId instanceof Utf8 ? (Utf8)this.allocId : null);
          break;

        case 1:
          this.entity = sean.kafka_streams_poc.avro.domain.Entity.values()[in.readEnum()];
          break;

        case 2:
          this.taserApprovalId = in.readString(this.taserApprovalId instanceof Utf8 ? (Utf8)this.taserApprovalId : null);
          break;

        case 3:
          this.economics = in.readString(this.economics instanceof Utf8 ? (Utf8)this.economics : null);
          break;

        case 4:
          this.marked = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










